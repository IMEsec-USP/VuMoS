"""add_sqlinjection_vulnerability_type

Revision ID: b31ae2657c46
Revises: b4d50f3f1bcf
Create Date: 2021-03-19 13:29:20.391837

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b31ae2657c46'
down_revision = 'b4d50f3f1bcf'
branch_labels = None
depends_on = None

def index_exists(name):
	connection = op.get_bind()
	result = connection.execute(
		"SELECT exists(SELECT 1 from pg_indexes where indexname = '{}') as ix_exists;"
			.format(name)
	).first()
	return result.ix_exists


def upgrade():
	op.execute("""
		insert into vulnerability_type ("name", severity)
		values('SQL injection', '8')
		on conflict do nothing 
	""")

	op.execute("""
		insert into vulnerability (status, found_by, confirmed_by, vulnerability_type_id, path_id, found_dttm, confirmed_dttm)
			select 
				'confirmed', 'sqlmap', 'sqlmap',
				(select vt.vulnerability_type_id from vulnerability_type vt where vt."name" = 'SQL injection'),
				s.path_id,
				s.updated_dttm, 
				s.updated_dttm
			from scans.sqlmap s
			left join (select * from vulnerability v
						inner join vulnerability_type vt 
							on vt.vulnerability_type_id = v.vulnerability_type_id
						where vt."name" = 'SQL injection') as foo
				on s.path_id = foo.path_id
			where s."output" is not null
			and foo.vulnerability_id is null
	""")
	if not index_exists('uq_vulnerability'):
		op.create_unique_constraint(
			"uq_vulnerability", 
			'vulnerability', [
				'vulnerability_type_id', 
				'host_id',
				'path_id',
				'machine_id'
			]
		)

def downgrade():
	pass
