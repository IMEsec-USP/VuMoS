from sqlalchemy.orm import Session
from typing import List, Optional

from commons.domain.models import \
	Host, \
	Machine, \
	Path, \
	Vulnerability, \
	VulnerabilityType

from commons.domain.repository import VulnerabilityRepository as definition


class VulnerabilityRepository(definition):
	def __init__(self,
				 session: Session):
		self.session = session

	def get_by_id(self,
				  vulnerability_id: int) -> Vulnerability:
		return self.session.query(Vulnerability).filter(Vulnerability.id == vulnerability_id).first()

	def get_by(self,
			   host: Optional[Host] = None,
			   machine: Optional[Machine] = None,
			   path: Optional[Path] = None,
			   type: Optional[VulnerabilityType] = None) -> List[Vulnerability]:
		query = self.session.query(Vulnerability)
		if host != None:
			query = query.filter(Vulnerability.host == host)
		if machine != None:
			query = query.filter(Vulnerability.machine == machine)
		if path != None:
			query = query.filter(Vulnerability.path == path)
		if type != None:
			query = query.filter(Vulnerability.type == type)
		return query.all()

	def add(self,
			vulnerability: Vulnerability) -> Vulnerability:
		self.session.add(vulnerability)
		self.session.flush()
		return vulnerability
	
	def update(self,
			   vulnerability: Vulnerability) -> Vulnerability:
		self.session.flush()
		return vulnerability
