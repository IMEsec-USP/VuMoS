from abc import ABC, abstractmethod
from typing import List, Optional

from domain.models import \
	Host, \
	Machine, \
	Path, \
	Vulnerability, \
	VulnerabilityType

class VulnerabilityRepository(ABC):

	@abstractmethod
	def get_by_id(self,
				  vulnerability_id: int) -> Vulnerability:
		raise NotImplementedError()

	@abstractmethod
	def get_by(self,
			   host: Optional[Host] = None,
			   machine: Optional[Machine] = None,
			   path: Optional[Path] = None,
			   type: Optional[VulnerabilityType] = None) -> List[Vulnerability]:
		raise NotImplementedError()

	@abstractmethod
	def add(self,
			vulnerability: Vulnerability) -> Vulnerability:
		raise NotImplementedError()

	@abstractmethod
	def update(self,
			   vulnerability: Vulnerability) -> Vulnerability:
		raise NotImplementedError()
